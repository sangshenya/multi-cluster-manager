/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "harmonycloud.cn/stellaris/pkg/apis/multicluster/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// MultiClusterResourceOverrideLister helps list MultiClusterResourceOverrides.
// All objects returned here must be treated as read-only.
type MultiClusterResourceOverrideLister interface {
	// List lists all MultiClusterResourceOverrides in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.MultiClusterResourceOverride, err error)
	// MultiClusterResourceOverrides returns an object that can list and get MultiClusterResourceOverrides.
	MultiClusterResourceOverrides(namespace string) MultiClusterResourceOverrideNamespaceLister
	MultiClusterResourceOverrideListerExpansion
}

// multiClusterResourceOverrideLister implements the MultiClusterResourceOverrideLister interface.
type multiClusterResourceOverrideLister struct {
	indexer cache.Indexer
}

// NewMultiClusterResourceOverrideLister returns a new MultiClusterResourceOverrideLister.
func NewMultiClusterResourceOverrideLister(indexer cache.Indexer) MultiClusterResourceOverrideLister {
	return &multiClusterResourceOverrideLister{indexer: indexer}
}

// List lists all MultiClusterResourceOverrides in the indexer.
func (s *multiClusterResourceOverrideLister) List(selector labels.Selector) (ret []*v1alpha1.MultiClusterResourceOverride, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MultiClusterResourceOverride))
	})
	return ret, err
}

// MultiClusterResourceOverrides returns an object that can list and get MultiClusterResourceOverrides.
func (s *multiClusterResourceOverrideLister) MultiClusterResourceOverrides(namespace string) MultiClusterResourceOverrideNamespaceLister {
	return multiClusterResourceOverrideNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// MultiClusterResourceOverrideNamespaceLister helps list and get MultiClusterResourceOverrides.
// All objects returned here must be treated as read-only.
type MultiClusterResourceOverrideNamespaceLister interface {
	// List lists all MultiClusterResourceOverrides in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.MultiClusterResourceOverride, err error)
	// Get retrieves the MultiClusterResourceOverride from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.MultiClusterResourceOverride, error)
	MultiClusterResourceOverrideNamespaceListerExpansion
}

// multiClusterResourceOverrideNamespaceLister implements the MultiClusterResourceOverrideNamespaceLister
// interface.
type multiClusterResourceOverrideNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all MultiClusterResourceOverrides in the indexer for a given namespace.
func (s multiClusterResourceOverrideNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.MultiClusterResourceOverride, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MultiClusterResourceOverride))
	})
	return ret, err
}

// Get retrieves the MultiClusterResourceOverride from the indexer for a given namespace and name.
func (s multiClusterResourceOverrideNamespaceLister) Get(name string) (*v1alpha1.MultiClusterResourceOverride, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("multiclusterresourceoverride"), name)
	}
	return obj.(*v1alpha1.MultiClusterResourceOverride), nil
}
